(ns simplexity.complex
  (:require [clojure.spec.test.alpha :as test]
            [cognitect.transcriptor :as xr]
            [clojure.spec.alpha :as s]))

(require '[simplexity.complex :refer :all]
         '[cognitect.transcriptor :as xr :refer (check!)]
         '[clojure.spec.alpha :as s]
         '[clojure.spec.gen.alpha :as gen]
         '[clojure.math.combinatorics :as combo]
         '[clojure.spec.test.alpha :as test])

(def open-triangle [[0 1] [1 2] [2 0]])
(check! :simplexity.complex/complex open-triangle)
(check! false? (s/valid? :simplexity.complex/simplex open-triangle))

;; Dimension
;; ---------------------------

(dim open-triangle)
(check! #{1})

(def tetra [[0 1 2 3]])
(dim tetra)
(check! #{3})

(test/check `simplexity.complex/dim)

;; Is this verification redundant or informative?

(def tri [0 1 2])
(def tri-2 [[0 1 2]])
(def ring [[0 1] [1 2] [2 0]])
(def tetra [1 2 3 4])

(check! #{2} (dim tri))
(check! #{2} (dim tri-2))
(check! #{1} (dim ring))
(check! #{3} (dim tetra))
(check! #{3} (dim [[0 1 2 3] [0 1] [2 3]]))

;; Facets
;; ----------------------
(check! #{[0 1]} (some #{[0 1]} (facets open-triangle)))
(check! #{true} (not (some #{[0 1 2]} (facets open-triangle))))

(def triangle-1 [[0 1 2]])
(def triangle-2 [0 1 2])
(check! #{[0 1 2]} (some #{[0 1 2]} (facets triangle-1)))
(check! #{[0 1 2]} (some #{[0 1 2]} (facets triangle-2)))
(check! #{1} (count (facets triangle-1))) ;; A simplex is its only facet
(check! #{1} (count (facets triangle-1)))


;; Elements
;; -------------------
(elements open-triangle)
(check! #{[0 1]} (some #{[0 1]} open-triangle))
(check! #{[0]} (some #{[0]} (elements open-triangle)))
(check! #{7} (count (elements open-triangle)))
(check! true? (every? #(s/valid? :simplexity.complex/simplex %) (elements open-triangle)))

;; I thought this:
#_(check! true? (s/every :simplexity.complex/simplex (elements open-triangle)))
;; ...would substitute for the predecessor. Not so much.

;; Faces
;; -------------------
;; Q: What are the 'faces' of a complex that is not a simplex? What should be returned? The facets? The faces of the facets? Nil?


;; Helpful predicate
;; ---------------------------
(check! true? (simplex? [1 2 3]))
(check! true? (simplex? [[1 2 3]]))
(check! false? (simplex? [[0 1 2] [2 3]]))
