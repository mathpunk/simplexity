(require '[simplexity.complex :refer :all]
         '[cognitect.transcriptor :as xr :refer (check!)]
         '[clojure.spec.alpha :as s]
         '[clojure.spec.gen.alpha :as gen]
         '[clojure.math.combinatorics :as combo]
         '[clojure.spec.test.alpha :as test])

(def open-triangle [[0 1] [1 2] [2 0]])

open-triangle
(check! :simplexity.complex/complex)

(dim open-triangle)
(check! #{1})

(def tetra [[0 1 2 3]])
(dim tetra)
(check! #{3})

(size open-triangle)
(check! #{3})

(facets open-triangle)
(some #{[0 1]} (facets open-triangle))
(check! #{[0 1]})

(not (some #{[0 1 2]} (facets open-triangle)))
(check! #{true})


;; For a strict complex:
open-triangle
(check! :simplexity.complex/strict-complex)

(elements open-triangle)
(check! (s/every :simplexity.complex/simplex))

(elements open-triangle)
(some #{[0 1]} open-triangle)
(check! #{[0 1]})

(elements open-triangle)
(some #{[0]} (elements open-triangle))
(check! #{[0]})

(count (elements open-triangle))
(check! #{7})

;; For a simplex:

(def triangle [0 1 2])
triangle
(check! :simplexity.complex/simplex)

(elements triangle)
(some #{[0 1 2]} (elements triangle))
(check! #{[0 1 2]})
(count (elements triangle))
(check! #{8})

(test/check `simplexity.complex/elements {:clojure.spec.test.check/opts {:num-tests 5}})
